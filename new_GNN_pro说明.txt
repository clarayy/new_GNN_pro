BA100分为10类：
[(0, 0), (1, 0), (11, 0), (14, 0), (21, 0), (24, 0), (39, 0), (50, 0), (56, 0), (57, 0), (59, 0), (60, 0), (62, 0), (64, 0), (66, 0), (67, 0), (69, 0), (73, 0), (75, 0), (83, 0), (85, 0), (89, 0), (97, 0), (2, 1), (3, 1), (5, 1), (6, 1), (10, 1), (12, 1), (19, 1), (23, 1), (26, 1), (27, 1), (29, 1), (31, 1), (82, 1), (96, 1), (99, 1), (4, 2), (7, 2), (34, 2), (44, 2), (77, 2), (80, 2), (94, 2), (98, 2), (41, 3), (42, 3), (47, 3), (54, 3), (61, 3), (65, 3), (78, 3), (86, 3), (87, 3), (92, 3), (93, 3), (9, 4), (15, 4), (16, 4), (30, 4), (43, 4), (51, 4), (55, 4), (58, 4), (74, 4), (17, 5), (25, 5), (28, 5), (36, 5), (45, 5), (79, 5), (95, 5), (18, 6), (20, 6), (22, 6), (33, 6), (37, 6), (46, 6), (48, 6), (49, 6), (71, 6), (32, 7), (63, 7), (76, 7), (35, 8), (53, 8), (70, 8), (81, 8), (88, 8), (90, 8), (8, 9), (13, 9), (38, 9), (40, 9), (52, 9), (68, 9), (72, 9), (84, 9), (91, 9)]
10
[[0, 1, 11, 14, 21, 24, 39, 50, 56, 57, 59, 60, 62, 64, 66, 67, 69, 73, 75, 83, 85, 89, 97], [2, 3, 5, 6, 10, 12, 19, 23, 26, 27, 29, 31, 82, 96, 99], [4, 7, 34, 44, 77, 80, 94, 98], [41, 42, 47, 54, 61, 65, 78, 86, 87, 92, 93], [9, 15, 16, 30, 43, 51, 55, 58, 74], [17, 25, 28, 36, 45, 79, 95], [18, 20, 22, 33, 37, 46, 48, 49, 71], [32, 63, 76], [35, 53, 70, 81, 88, 90], [8, 13, 38, 40, 52, 68, 72, 84, 91]]
0
2
4
41
9
17
18
35
8
dolphins分为5类：
[(0, 0), (1, 0), (5, 0), (6, 0), (16, 0), (18, 0), (60, 0), (2, 1), (4, 1), (17, 1), (32, 1), (33, 1), (38, 1), (39, 1), (40, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (56, 1), (58, 1), (59, 1), (3, 2), (22, 2), (23, 2), (34, 2), (36, 2), (37, 2), (41, 2), (47, 2), (48, 2), (52, 2), (53, 2), (54, 2), (7, 3), (14, 3), (15, 3), (24, 3), (25, 3), (26, 3), (27, 3), (28, 3), (29, 3), (35, 3), (49, 3), (51, 3), (55, 3), (61, 3), (8, 4), (9, 4), (10, 4), (11, 4), (12, 4), (13, 4), (19, 4), (20, 4), (21, 4), (30, 4), (31, 4), (50, 4), (57, 4)]
5
[[0, 1, 5, 6, 16, 18, 60], [2, 4, 17, 32, 33, 38, 39, 40, 42, 43, 44, 45, 46, 56, 58, 59], [3, 22, 23, 34, 36, 37, 41, 47, 48, 52, 53, 54], [7, 14, 15, 24, 25, 26, 27, 28, 29, 35, 49, 51, 55, 61], [8, 9, 10, 11, 12, 13, 19, 20, 21, 30, 31, 50, 57]]
0
2
3
7
8
{0: 0, 1: 0, 2: 1, 3: 2, 4: 1, 5: 0, 6: 0, 7: 4, 8: 4, 9: 0, 10: 4, 11: 4, 12: 3, 13: 3, 14: 4, 15: 4, 16: 0, 17: 1, 18: 1, 19: 3, 20: 3, 21: 3, 22: 2, 23: 2, 24: 4, 25: 4, 26: 4, 27: 4, 28: 4, 29: 4, 30: 0, 31: 0, 32: 1, 33: 1, 34: 2, 35: 4, 36: 2, 37: 2, 38: 1, 39: 1, 40: 1, 41: 2, 42: 1, 43: 1, 44: 1, 45: 1, 46: 1, 47: 2, 48: 2, 49: 4, 50: 4, 51: 4, 52: 2, 53: 2, 54: 2, 55: 4, 56: 1, 57: 3, 58: 1, 59: 1, 60: 1, 61: 4}
0:0 1 5 6 9  16 30 31    ==8
1:2 4 17 18 32 33 38 39 40 42 43 44 45 46 56 58 59 60  ==18
2:3  22 23 34 36 37 41  47 48 52 53 54 ==12
3:12 13 19 20 21  57 ==6
4:7 8 10 11 14 15 24 25 26 27 28 29 35  49 50 51 55  61 ==18
(GNN) iot@linux:~/zcy/usb/copy/new_GNN/new_GNN/diffpool-master$ python -m train  --datadir=data --bmname=BA200_SI_g0.5_r3 --cuda=cpu --num-classes=200 --epochs=100 --max-nodes=200 --method=soft-assign
(GNN) iot@linux:~/zcy/usb/copy/new_GNN/rexying_diffpool/diffpool-master$ python -m train --datadir=data --bmname=BA500_SI_class0 --cuda=0 --max-nodes=500 --epochs=100 --num-classes=55
i=1时进程卡住

(GNN) iot@linux:~/zcy/usb/copy/rexying_diffpool/diffpool-master$ python -m train --datadir=data --bmname=BA500_SI_class0 --cuda=0 --max-nodes=500 --epochs=100 --num-classes=55 
死机，数据的处理太复杂，每个图都用500节点，实际上没有这么多节点; 

(GNN) iot@linux:~/zcy/usb/copy/new_GNN/new_GNN/diffpool-master$ (GNN) iot@linux:~/zcy/usb/copy/rexying_diffpool/diffpool-master$ python -m train --datadir=data --bmname=BA500_SI_class0 --cuda=0 --max-nodes=500 --epochs=100 --num-classes=55
train.py  运行时使用的是graph_labels.txt   num_workers=1
运行到第二轮的这一部分killed
Epoch:  37
Avg loss:  tensor(0.0331, grad_fn=<DivBackward0>) ; epoch time:  7.748146295547485
Train  accuracy: 1.0
Validation  accuracy: 0.7664233576642335
Best val result:  {'epoch': 36, 'loss': tensor(0.0372, grad_fn=<DivBackward0>), 'acc': 0.7846715328467153}
Epoch:  38
Avg loss:  tensor(0.0319, grad_fn=<DivBackward0>) ; epoch time:  7.770450830459595
Train  accuracy: 0.9833333333333333
Validation  accuracy: 0.7554744525547445
Best val result:  {'epoch': 36, 'loss': tensor(0.0372, grad_fn=<DivBackward0>), 'acc': 0.7846715328467153}
Epoch:  39
Avg loss:  tensor(0.0311, grad_fn=<DivBackward0>) ; epoch time:  7.604553937911987
Train  accuracy: 1.0
/home/iot/anaconda3/envs/GNN/lib/python3.7/site-packages/sklearn/metrics/_classification.py:1248: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))
Validation  accuracy: 0.7773722627737226
Best val result:  {'epoch': 36, 'loss': tensor(0.0372, grad_fn=<DivBackward0>), 'acc': 0.7846715328467153}
Epoch:  40
Killed

还是用这个数据集，但是不用55类，先用25类试一下，即用55类中的前25类，前1250张图
(GNN) iot@linux:~/zcy/usb/copy/new_GNN/new_GNN/diffpool-master$ python -m train --datadir=data --bmname=BA500_SI_class0 --cuda=0 --max-nodes=500 --epochs=100 --num-classes=25
40类 前1999张图         35类前1749张图

(GNN) iot@linux:~/zcy/usb/copy/new_GNN/new_GNN/diffpool-master$ python -m train --datadir=data --bmname=BA500_SI_class0 --cuda=0 --max-nodes=500 --epochs=100 --num-classes=35
结果：
0.8614942528735632
87

(GNN) iot@linux:~/zcy/usb/copy/rexying_diffpool/diffpool-master$ python -m train --datadir=data --bmname=dolphins_class1 --cuda=0 --max-nodes=62 --epochs=100 --num-classes=18
验证分18类时标签不用从0-17标注，可以是任意数字，那为什么我在写分级分类程序时，标签会显示超出范围？？？
准确率0.694
标签必须是0-n, 源程序在load_data中对labels进行了处理过了，也得处理才行。
class2:63类但只有1749张图？？？每类50,应该有3150张

BA500分5类:   实际上是分10类吧，怎么办呢？无所谓，先分五类
55
33
63
58
48
class0: [0, 3, 18, 19, 49, 51, 56, 60, 68, 74, 84, 102, 109, 111, 146, 148, 149, 168, 173, 181, 182, 200, 205, 208, 209, 217, 219, 227, 229, 232, 249, 272, 276, 286, 308, 314, 327, 328, 341, 347, 368, 385, 396, 406, 424, 431, 436, 446, 454, 460, 466, 481, 485, 493, 496]
class1: [12, 28, 46, 80, 106, 143, 155, 160, 162, 164, 167, 185, 191, 192, 204, 237, 238, 278, 287, 290, 297, 305, 324, 325, 346, 348, 364, 365, 370, 393, 418, 439, 440]
class2: [2, 7, 8, 17, 29, 30, 32, 35, 44, 62, 85, 91, 108, 113, 124, 166, 170, 172, 174, 176, 177, 183, 187, 193, 194, 198, 202, 206, 207, 215, 218, 225, 230, 243, 252, 254, 257, 262, 273, 281, 282, 296, 302, 303, 307, 318, 335, 355, 359, 362, 400, 404, 410, 425, 427, 434, 448, 452, 470, 480, 486, 487, 499]
class3: [4, 13, 25, 26, 31, 37, 40, 41, 42, 50, 57, 58, 66, 70, 81, 107, 119, 121, 123, 142, 151, 159, 180, 184, 203, 210, 221, 234, 246, 248, 279, 285, 300, 301, 306, 316, 317, 326, 339, 349, 353, 358, 360, 371, 377, 379, 402, 407, 409, 415, 416, 430, 457, 459, 471, 472, 476, 497]
class4: [5, 9, 15, 22, 43, 48, 61, 72, 117, 125, 127, 128, 130, 141, 153, 163, 199, 212, 220, 224, 228, 240, 264, 267, 270, 275, 280, 292, 299, 315, 320, 321, 338, 344, 351, 361, 366, 381, 383, 395, 398, 414, 420, 437, 455, 468, 491, 495]

11.27日
new_GNN_class10是new_GNN的复制，更改的部分是 classtrain_ws.py是第一级10分类的训练程序;classtrain_trap13.py是第一级13分类的程序;
classtrain_ws.py首先实验ws100节点，10类，可以运行;
                                   然后实验BA200节点，10类，range=2，epochs=10,100时都卡住;
                                   用终端查看内存使用情况寻找原因：i=1卡住，2小时后恢复，内存显示也不动；可能的原因是BA网络本身的问题
改BA100实验   结果ok
WS200实验  

12.15
分类太多时，每一部分都加载相同的数据集占内存，因此将每一层网络都分开训练，训练完存储一下，清楚数据缓存，然后在继续训练，最终的test数据集也是最后在进行验证。
new_GNN_pro中这样改。

1.10
food500分13类实验：
(GNN) iot@linux:~/zcy/usb/copy/new_GNN/new_GNN_pro/diffpool-master$ python -m newmethord.py --datadir=data --bmname=food500_nSI_z0.1_m20_11 --cuda=cpu --batch-size=20 --num-classes=13 --epochs=10 --max-nodes=500 --method=base
存储的第一级模型为food500_nSI_z0.1_m20_11_Mt.pt
adj 不为NxN时能否运行：可以运行
adj 为NxN时能否运行：不能运行  在graphsampler卡住
                                           改为1000张图 可以运行 epoch=100需要15分钟
_11[0:100]*20;_12[100:200]*20;_13[200:300]*20;_14[300:500]*20;











